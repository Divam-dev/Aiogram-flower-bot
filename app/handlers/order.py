from aiogram import F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from app.keyboards import get_menu_kb
from app.handlers.common import OrderStates, carts
from app.handlers.cart import view_cart
from app.payment import create_wayforpay_invoice

router = Router()

@router.message(OrderStates.choosing_delivery, F.text == "üè™ –°–∞–º–æ–≤–∏–≤—ñ–∑")
async def process_self_pickup(message: Message, state: FSMContext):
    await state.update_data(delivery_method="self_pickup")
    
    await state.set_state(OrderStates.entering_phone)
    await message.answer(
        "–í–∏ –æ–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤–∏–≤—ñ–∑. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(OrderStates.choosing_delivery, F.text == "üöö –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑")
async def process_immediate_payment(message: Message, state: FSMContext):
    await state.update_data(delivery_method="immediate_payment")
    
    await state.set_state(OrderStates.entering_phone)
    await message.answer(
        "–í–∏ –æ–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –∑–∞—Ä–∞–∑. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(OrderStates.choosing_delivery, F.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ—à–∏–∫—É")
async def back_to_cart(message: Message, state: FSMContext):
    await view_cart(message, state)

@router.message(OrderStates.entering_phone)
async def process_phone_number(message: Message, state: FSMContext):
    chat_id = message.chat.id
    phone_number = message.text
    
    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if not (phone_number.startswith("+380") and len(phone_number) == 13 and phone_number[1:].isdigit()):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX")
        return
    
    await state.update_data(phone=phone_number)
    
    await state.set_state(OrderStates.entering_email)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó:")

@router.message(OrderStates.entering_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text
    chat_id = message.chat.id
    
    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ email
    if "@" not in email or "." not in email:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email")
        return
    
    await state.update_data(email=email)
    data = await state.get_data()
    
    delivery_method = data.get("delivery_method")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
    user_data = {
        "chat_id": chat_id,
        "phone": data.get("phone"),
        "email": email,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "currency_code": data.get("currency_code", "UAH")
    }
    
    if not carts.get(chat_id):
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
    
    if delivery_method == "self_pickup":
        await message.answer(
            "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–º–æ–≤–∏–≤—ñ–∑ —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
            f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º {data.get('phone')} "
            "–¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –∞–¥—Ä–µ—Å–∏ —Å–∞–º–æ–≤–∏–≤–æ–∑—É.\n\n"
            "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
            reply_markup=get_menu_kb()
        )
        
        if chat_id in carts:
            carts[chat_id] = {}
        
        await state.set_state(OrderStates.choosing_category)
        return
    
    try:
        payment_data = create_wayforpay_invoice(carts[chat_id], user_data)
        
        if payment_data.get("reason") == "Ok" and payment_data.get("invoiceUrl"):
            payment_url = payment_data.get("invoiceUrl")
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", url=payment_url)]
            ])
            
            await message.answer(
                "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ!\n\n"
                "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.",
                reply_markup=keyboard
            )
            
            await state.update_data(payment_url=payment_url)
            await state.update_data(order_reference=payment_data.get("orderReference"))
            await state.set_state(OrderStates.confirming_payment)
            
        else:
            await message.answer(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É: {payment_data.get('reason', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.",
                reply_markup=get_menu_kb()
            )
            await state.set_state(OrderStates.choosing_category)
            
    except Exception as e:
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–∞—Ç–µ–∂—É: {str(e)}.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.",
            reply_markup=get_menu_kb()
        )
        await state.set_state(OrderStates.choosing_category)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
@router.message(OrderStates.confirming_payment)
async def check_payment_status(message: Message, state: FSMContext):
    
    if message.text.lower() in ["–Ω–∞–∑–∞–¥", "—Å–∫–∞—Å—É–≤–∞—Ç–∏", "–≤—ñ–¥–º—ñ–Ω–∏—Ç–∏", "cancel"]:
        await message.answer("–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –æ–ø–ª–∞—Ç—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç–µ—Å—å –¥–æ –º–µ–Ω—é.", reply_markup=get_menu_kb())
        await state.set_state(OrderStates.choosing_category)
        return
    
    data = await state.get_data()
    await message.answer(
        f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏. –Ø–∫—â–æ –≤–∏ –≤–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, "
        f"–Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º {data.get('phone')}.\n\n"
        f"–Ø–∫—â–æ –≤–∏ —â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: {data.get('payment_url')}",
        reply_markup=get_menu_kb()
    )
    
    chat_id = message.chat.id
    if chat_id in carts:
        carts[chat_id] = {}
    
    await state.set_state(OrderStates.choosing_category)
